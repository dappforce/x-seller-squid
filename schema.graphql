type Domain @entity {
  id: ID!
  owner: Account
  domainRegistrationOrders: [DomainRegistrationOrder!]
    @derivedFrom(field: "domain")
  createdAt: DateTime
  createdAtBlock: Int
}

type Account @entity {
  id: ID!
  domains: [Domain!] @derivedFrom(field: "owner")
  domainRegistrationOrders: [DomainRegistrationOrder!]
    @derivedFrom(field: "target")

  energyBoxes: [EnergyBox!] @derivedFrom(field: "owner")
}

type DomainRegistrationOrder @entity {
  "Attempt ID from remark and it's the same value for all purchase, confirmation and refund(if it's existing) remarks"
  id: ID!
  createdAtBlock: Int!
  createdAtTime: DateTime!
  updatedAtBlock: Int
  updatedAtTime: DateTime
  blockHashSellerChain: String
  blockHashUnameHostChain: String
  confirmedBlockHashSellerChain: String
  confirmedRemarkCallId: String
  refundBlockHashSellerChain: String
  refundRemarkCallId: String
  target: Account!
  domain: Domain!
  price: BigInt
  "TODO should be reviewed"
  token: String!
  purchaseTx: Transfer
  refundTx: Transfer
  status: OrderRequestStatus
  refundStatus: OrderRefundStatus
  purchaseRmrk: DmnRegRemark
  confirmationRmrk: DmnRegRemark
  refundRmrk: DmnRegRemark
  errorRegistration: OrderError
  errorRefund: OrderError
}

type EnergyBox @entity {
  "Attempt ID from remark and it's the same value for all generation, confirmation and refund(if it's existing) remarks"
  id: ID!
  blockHashSellerChain: String
  blockHashEnergyHostChain: String
  energyAmount: BigInt!
  boxPrice: BigInt!
  "TODO should be reviewed"
  token: String!
  owner: Account
  purchaseTx: Transfer
  refundTx: Transfer
  status: OrderRequestStatus
  refundStatus: OrderRefundStatus
  generationRmrk: NrgRemark
  confirmationRmrk: NrgRemark
  refundRmrk: NrgRemark
  errorGeneration: OrderError
  errorRefund: OrderError
}

type Transfer @entity {
  id: ID!
  blockHash: String!
  extrinsicHash: String!
  eventIndex: Int!
  amount: BigInt!
  token: String
  from: Account!
  to: Account!
  addressChainPrefix: String
}

type DmnRegRemark {
  protName: String!
  version: String!
  destination: String!
  action: String!
  content: DmnRegRemarkContent!
}

type DmnRegRemarkContent {
  opId: String!
  target: String!
  domainName: String!
  token: String!
}

type NrgRemark {
  protName: String!
  version: String!
  destination: String!
  action: String!
  content: NrgRemarkContent!
}
type NrgRemarkContent {
  opId: String!
  target: String!
  energyAmount: String!
  token: String!
}

enum OrderRequestStatus {
  Processing
  Successful
  Failed
}
enum OrderRefundStatus {
  None
  Waiting
  Fulfilled
  Failed
}

type OrderError {
  module: String
  status: String
  reason: String
}

type ProcessingState @entity {
  id: ID!
  domainRegRefundFullProcessingAtBlock: Int!
}
